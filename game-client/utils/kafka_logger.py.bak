# # kafka_logger.py

# import time
# import json
# from kafka import KafkaProducer
# from typing import Optional, Dict, Any

# from config.settings import KAFKA_BOOTSTRAP_SERVERS, KAFKA_TOPIC


# class KafkaLogger:
#     """Kafka로 이벤트를 전송하는 클래스."""
#     def __init__(self) -> None:
#         self.producer = KafkaProducer(
#             bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
#             value_serializer=lambda v: json.dumps(v).encode('utf-8')
#         )

#     def send_event(self, event_type: str, details: Optional[Dict[str, Any]] = None) -> None:
#         event = {
#             "event_type": event_type,
#             "details": details or {},
#         }
#         self.producer.send(KAFKA_TOPIC, event)

#     def flush(self) -> None:
#         self.producer.flush()

#     def close(self) -> None:
#         self.producer.close()
# KafkaLogger=KafkaLogger()

# class CooldownTimer:
#     """쿨다운(장전) 관리용 타이머 클래스."""
#     def __init__(self, cooldown_time: float) -> None:
#         self.cooldown_time = cooldown_time
#         self.last_action_time = time.time() - cooldown_time  # 처음부터 쏠 수 있도록

#     def ready(self) -> bool:
#         return (time.time() - self.last_action_time) >= self.cooldown_time

#     def trigger(self) -> None:
#         self.last_action_time = time.time()
